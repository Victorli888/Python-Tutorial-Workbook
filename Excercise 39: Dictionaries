# Create a mapping of state to abbreviation
states = {
    'Oregon': "OR",
    'Florida': "FL",
    'Califonia': "CA",
    'New York': "NY",
    'Michigan': "MI"
}

# Create a basic set of states and some cities in them
cities = {
    'CA': 'San Fransisco',
    'MI': 'Detroit',
    'FL': 'Jacksonville'
}

# add some more cities
cities["NY"] = "New York"
cities['OR'] = "Oregon"

# print out some cities
print('-' * 10)
print("NY State has: ", cities['NY'])
print("OR State has: ", cities['OR'])

# print some states
print('-' * 10)
print("Michigan's abbreviation is:", states["Michigan"])
print("Florida's abbreviation is:", states['Florida'])

# do it by using state then cities dict
print('_' * 10)
print("Michigan has: ", cities[states['Michigan']])
print("Florida has: ", cities[states['Florida']])

# print every state abbreviation
print('_' * 10)
for state, abbrev in list(states.items()):
    print(f"{state} is abbreviated {abbrev}")

# print every city in state
print('-' * 10)
for abbrev, city in list(cities.items()):
    print(f"{abbrev} has the city {city}")

# Now do both at the same time
print('-' * 10)
for state, abbrev in list(states.items()):
    print(f"{state} state is abbreviated {abbrev}")
    print(f"and has city {cities[abbrev]}")

print('-' * 10)
# Safely get a abbreviation by state that might no be there
state = states.get('Texas')

if not state:
    print("Sorry, no Texas.")
# get  a city with a default value
city = cities.get('TX', 'Does not exist')
print(f"The city for the state 'TX' is: {city}")
